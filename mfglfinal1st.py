# -*- coding: utf-8 -*-
"""MFGLFINAL1ST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ntEXoEMFM4r8si-Z1bxGf3WPmv4Kifqf
"""

import streamlit as st

st.title("VALCONT PROGRAM")
st.write("PAMA BEKB")
st.write("---")

# Menampilkan teks
st.write("Valcont (Validation and Controlling) Program atau yang biasa kita kenal dengan Match Factor merupakan kesesuaian antara unit Loading dengan unit Hauling pada Operasional Penambangan. Tujuannya adalah untuk menentukan Kombinasi alat kerja yang optimal serta memastikan operasional berjalan dengan Produktif dan Aman")
st.write("Seringkali terjadi bahwa Jumlah unit Hauling yang sudah tersetting, namun dilapangan masih terdapat waktu tunggu pada unit loading ataupun antrian pada unit hauling, sehingga diperlukan untuk terus dicontrol maupun dimonitor secara periodik 2-3 jam, maka dengan adanya Valcont Program diharapkan dapat meminimalkan waktu tunggu ataupun antrian pada Operasional Tambang Site BEKB")
st.write("Dengan adanya Program ValCont ini juga, diharapkan dapat membantu semua pihak untuk turut serta melakukan Validasi dan Controling secara bersama demi terapainya target produksi")
st.write("---")

# Menampilkan teks
st.write("Diberikan parameter untuk memonitoring secara periodik di lapangan secara langsung, dengan Settingan unit Loading dapat di sesuaikan dengan EGI sebagai berikut : PC850, PC1250SP8, PC1250SP11R, PC2000SP8, PC200011R")
st.write("Sedangankan untuk unit Hauling hanya untuk EGI : HD785")
st.write("---")

# Menampilkan input form dan mendapatkan parameter dari pengguna
st.write("Masukan Parameter")
jumlah_hd = st.number_input("Jumlah HD785 (Jumlah)", min_value=0, step=1)
ct_pc = st.number_input("Waktu Cycle Time PC (Detik)", min_value=0.0, step=1.0)
passing = st.number_input("Jumlah Passing PC (Jumlah)", min_value=0, step=1)
ct_hd = st.number_input("Cycle Time HD (Dari keluar front sampai memasuki front kembali)(Menit)", min_value=0.0, step=1.0)
jarak = st.number_input("Jarak Front ke Disposal (KM)", min_value=0.0, step=1.0)

# Validasi jarak tidak boleh nol
if jarak <= 0:
    st.warning("Jarak tidak boleh nol!")
    jarak = st.number_input("Masukkan Jarak Front ke Disposal (KM)", min_value=0.0, step=1.0)

# Konversi Parameter
loading_time = (ct_pc * passing) / 60

# Formula MF
hasil = (jumlah_hd * loading_time) / (ct_hd)

st.write(f"Hasil Match Factor adalah {hasil:.2f}")

# Memeriksa Hasil MF
if 0.95 <= hasil <= 1:
    st.success("MF Good, Pertahankan Parameter! :)")
elif hasil < 0.95:
    # Menentukan jumlah HD yang dibutuhkan untuk mencapai hasil minimum 0.96
    jumlah_hd_rekomendasi = (0.96 * ct_hd) / (loading_time)
    st.warning(f"Rekomendasi: Tingkatkan Jumlah HD785 menjadi minimal {jumlah_hd_rekomendasi:.2f} HD")
else:
    # Menentukan jumlah HD yang dibutuhkan untuk mencapai hasil maksimum 1
    jumlah_hd2_rekomendasi = (1.00 * ct_hd) / (loading_time)
    st.warning(f"Rekomendasi: Kurangi Jumlah HD785 menjadi maksimal {jumlah_hd2_rekomendasi:.2f} HD")

# Maximal Productivity Excavator
hd785 = 42
pdty_jam = 60
rit_pc = round((pdty_jam/loading_time), 0)
max_ritasi_pc = rit_pc * hd785
st.write(f"Productivity Maksimal Excavator berdasarkan Parameter diperoleh {max_ritasi_pc:.2f} Bcm/Jam")

# Maximal Productivity HD
max_ritasi_hd = max_ritasi_pc / jumlah_hd
st.write(f"Productivity Maksimal HD785 berdasarkan Parameter diperoleh {max_ritasi_hd:.2f} Bcm/Jam")

# Mencari Speed Rata-Rata dari Parameter
ct_hd1 = ct_hd - 3
ct_hd_jam = ct_hd1 / 60
speed = (jarak + jarak) / ct_hd_jam
st.write(f"Speed rata-rata berdasarkan Parameter diperoleh {speed:.2f} Km/Jam")